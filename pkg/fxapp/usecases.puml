@startuml
:App Builder: as Builder
actor App

(Build App) as (Build)
(Provide Constructors) as (Provide)
(Register Invoke Functions) as (Invoke)

(Register Error Handlers) as (ErrorHandlers)
(Invoke Error Handlers) as (InvokeErrorHandlers)
(Startup Error Handlers) as (StartupErrorHandlers)
(Shutdown Error Handlers) as (ShutdownErrorHandlers)

(Populate Targets) as (Populate)

(Configure Logging) as (Logging)
(Set Log Writer) as (LogWriter)
(Set Log Level) as (LogLevel)
(Set App Fields) as (LoggerAppFields)

note top
app logger context fields:
- App ID
- App release ID
- App instance ID
- Event ID
end note

(Configure Metric Registry) as (Metrics)
(Collect Go Metrics) as (GoCollector)
(Collect Process Metrics) as (ProcessCollector)
(Add App Labels) as (MetricAppLabels)

note top
- App ID
- App release ID
- App instance ID
end note

(Configure Start/Stop Timeouts) as (Timeouts)

Builder -> Build
Build ..> Provide
Build ..> Invoke
Build ..> ErrorHandlers
ErrorHandlers ..> InvokeErrorHandlers
ErrorHandlers ..> StartupErrorHandlers
ErrorHandlers ..> ShutdownErrorHandlers
Build .up.> Populate

Build .up.> Logging
Logging .up.> LogWriter
Logging .up.> LogLevel
Logging .up.> LoggerAppFields

Build .up.> Metrics
Metrics .up.> GoCollector
Metrics .up.> ProcessCollector
Metrics .up.> MetricAppLabels

Build .up.> Timeouts

Build .> App

(Desc) as (Desc) << Provide >>
(Instance ID) as (InstanceID) << Provide >>
(App Logger) as (AppLogger) << Provide >>

(Metric Registerer) as (MetricRegistry) << Provide >>
(Metric Gatherer) as (MetricGatherer) << Provide >>
(Run HTTP Server) as (RunHTTPServer) << Invoke >>

note bottom
automatically starts up if
http endpoints are discovered

If an *http.Server is provided,
then the app will use it. Otherwise
it creates one with the following
default settings:
  - Addr: ":8008"
  - ReadHeaderTimeout: 1 sec
  - MaxHeaderBytes: 1024
end note

RunHTTPServer .up.> MetricGatherer

(Run)
(Shutdown)
usecase Lifecycle as "
Lifecycle Events
---
Initialized
Starting
Started
Stopping
Stopped
---
<<errors>>
Init Failed
Start Failed
Stop Failed
"

note top
- events are logged
- event channels are provided for:
  Starting, Started, Stopping, Stopped
end note

(Get Options) as (Options)

note top
Desc
InstanceID
Start Timeout
Stop Timeout
Constructor Types
Invoke Function Types
end note

App --> Desc
App --> InstanceID
App --> AppLogger
App --> MetricRegistry
App --> MetricGatherer
App -up-> Options
App -up-> Run
App -up-> Shutdown
App -up-> Lifecycle

@enduml