@startuml
skinparam usecase {
	BackgroundColor<< NEW >> DarkSeaGreen
	BorderColor<< NEW >> YellowGreen
}

actor :App : as APP

usecase APP_TIMEOUTS << envconfig >> as "app start and stop timeouts
are configurable"

note bottom of APP_TIMEOUTS {
APPX12_START_TIMEOUT
APPX12_STOP_TIMEOUT
}

usecase APP_LOGGING as "zerolog is used for logging"
usecase ZEROLOG_CONFIG << envconfig >> as "
zerolog global
log level is configurable"

note bottom of ZEROLOG_CONFIG {
APPX12_LOG_GLOBAL_LEVEL
APPX12_LOG_DISABLE_SAMPLING
}

usecase LOG_APP_DESC as "standard fields are logged
with each event"

note bottom of LOG_APP_DESC {
- app.Desc
- app.InstanceID
}

usecase LOG_TIMESTAMP as "log event timestamps are
logged in UNIX time"

usecase LOG_DURATION as "log event time.Duration fields
are logged in millisecs"

usecase LOG_ERROR_STACK_MARSHALLER as "error stack marshalling
is supported"

usecase GO_LOGGING as "zerolog is used as go
standard logger output"

usecase PROVIDE_APP_DESC << Provide >> as "app.Desc"

usecase PROVIDE_APP_DESC << Provide >> as "app.Desc"

note top of PROVIDE_APP_DESC {
      <<envconfig>>
The application descriptor
is loaded from env vars
---
APPX12_ID
APPX12_NAME
APPX12_VERSION
APPX12_RELEASE_ID
}

note as NAME_REGEX
name regex: `^[[[[:alpha:]]]][a-zA-Z0-9_]{2,49}$`
end note

PROVIDE_APP_DESC . NAME_REGEX

usecase PROVIDE_APP_INSTANCE_ID << Provide >> as "app.InstanceID"

note top of PROVIDE_APP_INSTANCE_ID  {
Each app instance is assigned a
unique instance ID upon starting up
}

usecase PROVIDE_LOGGER << Provide >> as "*zerolog.Logger"
usecase PROVIDE_ERR_REGISTRY << Provide >> as "*err.Registry"
usecase PROVIDE_EVENT_REGISTRY << Provide >> as "*logging.EventRegistry"
usecase PROVIDE_COMP_REGISTRY << Provide >> as "*comp.Registry"

note as COMP_REGISTRY_NOTES
comp events and errors
are auto registered
end note

COMP_REGISTRY_NOTES ..> PROVIDE_COMP_REGISTRY

APP .up.> PROVIDE_APP_DESC
APP .up.> PROVIDE_APP_INSTANCE_ID
APP .up..> PROVIDE_LOGGER
APP .up..> PROVIDE_ERR_REGISTRY
APP .up..> PROVIDE_EVENT_REGISTRY
APP .up..> PROVIDE_COMP_REGISTRY

usecase LOG_APP_LIFECYCLE_EVENTS as "App lifecycle
events are logged
---
Start
Running
StopSignal
Stop
Stopped"

usecase LOG_APP_INVOKE_ERRORS as "app func invoke errors
are logged"

usecase LOG_APP_START_STOP_ERRORS as "app start/stop
errors are logged"

usecase LOG_STOP_SIGNAL_EVENT as "app stop os.Signal is logged"

usecase APP_STOP_SIGNALS as "listens for stop signals
---
SIGINT
SIGTERM
"

APP_LOGGING .up.> GO_LOGGING
APP_LOGGING .up.> ZEROLOG_CONFIG
APP_LOGGING ..> LOG_APP_DESC
APP_LOGGING ...> LOG_TIMESTAMP
APP_LOGGING ...> LOG_DURATION
APP_LOGGING ....> LOG_APP_INVOKE_ERRORS
APP_LOGGING ....> LOG_APP_START_STOP_ERRORS
APP_LOGGING ....> LOG_STOP_SIGNAL_EVENT
APP_LOGGING ... LOG_ERROR_STACK_MARSHALLER


APP --> APP_TIMEOUTS
APP --> APP_LOGGING

APP --> LOG_APP_LIFECYCLE_EVENTS
APP -> APP_STOP_SIGNALS

@enduml